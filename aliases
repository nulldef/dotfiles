# vim: set syntax=sh;

macdown() {
  "$(mdfind kMDItemCFBundleIdentifier=com.uranusjr.macdown | head -n1)/Contents/SharedSupport/bin/macdown" $@
}

# Git
function gmm() {
  git checkout $(git_main_branch)
  git pull origin $(git_main_branch)
  git checkout @{-1}
  git merge $(git_main_branch) --no-edit
}

function com() {
  comment=$@
  git add .
  git commit -am $comment
}

function gdm() { git diff $(git_main_branch) $@ }
function gdn() { gdm --name-status }

alias gs="git show"
alias gca="git commit --amend"
alias gam="git add -A .; git commit -a --amend --no-edit"
alias gcob="git checkout @{-1}"
alias gl="git pull --prune"
alias gb="git branch -vv"
alias glog="git log --graph --pretty=format:'%C(auto)%h%d%Creset %C(cyan)(%cr)%Creset %C(green)%an <%ae>%Creset %s'"
alias ecom="git commit --allow-empty -m 'empty commit'"

# GitHub
function pr-list() {
  template='{{range .}}
    {{ $tests := "" }}
    {{range .statusCheckRollup}}
      {{if eq .conclusion "SUCCESS"}}
        {{ $tests = print $tests (autocolor "green" "S") }}
      {{else if eq .conclusion "FAILURE"}}
        {{ $tests = print $tests (autocolor "red" "F") }}
      {{else if eq .conclusion ""}}
        {{ $tests = print $tests (autocolor "yellow" "R") }}
      {{end}}
    {{end}}
    {{ $review := "" }}
    {{- range .reviews }}
      {{if (eq .state "APPROVED") }}
        {{if and (eq .author.login "nulldef")}}
          {{ $review = print $review (autocolor "cyan" "A")}}
        {{else}}
          {{ $review = print $review (autocolor "green" "A")}}
        {{end}}
      {{end}}
    {{end}}
    {{ $numberColor := "green" }}
    {{if .isDraft }}
      {{ $numberColor = "yellow" }}
    {{end}}
    {{tablerow (printf "#%v" .number | autocolor $numberColor) (.author.login) (.title | truncate 50) $tests $review (.baseRefName | autocolor "cyan") (print "<-") (.headRefName | autocolor "cyan") .url}}
  {{end}}'

  template=$(echo $template | tr -d '\n' | sed -E 's/\}[[:space:]]+\{/}{/g')

  gh pr list \
  --json baseRefName,headRefName,number,statusCheckRollup,title,number,updatedAt,url,reviewDecision,reviews,isDraft,author \
  --template "$template" \
  $@
}

# Kubernetes
function kcli() {
  pod=$1; shift
  command=$1; shift

  if [[ -z "$command" ]]
  then
    command='sh'
  fi

  kubectl exec -it $pod -- $command $@
}

function kwatch() {
  pattern=$1; shift

  watch -n1 "kubectl get pods --sort-by=.metadata.creationTimestamp $@ | ag $pattern"
}

alias k="kubectl"
alias kx="kubectx || kubectl config get-contexts"
alias kd="kubectl describe"
alias kl="kubectl logs"
alias kg="kubectl get"
alias kp="kubectl get pods"

# Docker Compose
alias dc="docker compose"
alias dcr="docker compose run -e ROLE=cli --rm"
alias dex="docker compose exec -e ROLE=cli -it"

# Common
alias ll="ls -lh"
alias la="ls -lah"
alias s="cd ~/apps"
alias d="cd ~/Downloads"
alias b="bundle exec"
alias v="nvim"
alias bo="EDITOR=subl bundle open"
alias no="EDITOR=subl npm edit"
alias tenv="RAILS_ENV=test MIX_ENV=test"
alias chrome="open -a \"Google Chrome\""
alias da="direnv allow"
alias p="pnpm"
