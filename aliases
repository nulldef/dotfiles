# vim: set syntax=sh;

macdown() {
  "$(mdfind kMDItemCFBundleIdentifier=com.uranusjr.macdown | head -n1)/Contents/SharedSupport/bin/macdown" $@
}

# Git
function gmm() {
  git checkout $(git_main_branch)
  git pull origin $(git_main_branch)
  git checkout @{-1}
  git merge $(git_main_branch) --no-edit
}

function gmd() {
   git checkout $(git_develop_branch)
   git pull
   git checkout @{-1}
   git merge $(git_develop_branch) --no-edit
}

function gdm() {
  git diff $(git_main_branch) $@
}

function gdn() {
  gdm --name-status $@
}

function com() {
  comment=$@
  git add .
  git commit -am $comment
}

alias gs="git show"
alias gca="git commit --amend"
alias gam="git add -A .; git commit -a --amend --no-edit"
alias gcob="git checkout @{-1}"
alias gl="git pull --prune"
alias gb="git branch -vv"
alias glog="git log --graph --pretty=format:'%C(auto)%h%d%Creset %C(cyan)(%cr)%Creset %C(green)%an <%ae>%Creset %s'"
alias ecom="git commit --allow-empty -m 'empty commit'"

function gdd() { git diff $(git_develop_branch) $@ }
function gddn() { git diff $(git_develop_branch) --name-status $@ }
function gmod() { git merge $(git_develop_branch) $@ }
function pr-list() {
  template='{{range .}}
    {{ $tests := "" }}
    {{range .statusCheckRollup}}
      {{if eq .conclusion "SUCCESS"}}
        {{ $tests = print $tests (autocolor "green" "S") }}
      {{else if eq .conclusion "FAILURE"}}
        {{ $tests = print $tests (autocolor "red" "F") }}
      {{else if eq .conclusion ""}}
        {{ $tests = print $tests (autocolor "yellow" "R") }}
      {{end}}
    {{end}}
    {{ $review := "" }}
    {{if eq .reviewDecision "APPROVED"}}
      {{ $review = autocolor "green" "A"}}
    {{end}}
    {{- range .reviews }}
      {{if and (eq .author.login "nulldef") (eq .state "APPROVED")}}
        {{ $review = print $review (autocolor "green" "*")}}
      {{end}}
    {{end}}
    {{ $numberColor := "green" }}
    {{if .isDraft }}
      {{ $numberColor = "yellow" }}
    {{end}}
    {{tablerow (printf "#%v" .number | autocolor $numberColor) (.author.login) (.title | truncate 50) $tests $review (.baseRefName | autocolor "cyan") (print "<-") (.headRefName | autocolor "cyan") (timeago .updatedAt) .url}}
  {{end}}'

  template=$(echo $template | tr -d '\n' | sed -E 's/\}[[:space:]]+\{/}{/g')

  gh pr list \
  --json baseRefName,headRefName,number,statusCheckRollup,title,number,updatedAt,url,reviewDecision,reviews,isDraft,author \
  --template "$template" \
  $@
}

# GitHub
alias prs="gh pr list -s open --json=number,author,reviews,title,url,reviewRequests -q 'map(select(.author.login != \"nulldef\" and .reviewRequests.[].login == \"nulldef\" and any(.reviews.[]; .author.login == \"nulldef\" and .state == \"APPROVED\") | not)) | unique | map(\"#\" + (.number | tostring) + \" \" + .title + \" \" + .url) | .[]'"

# Kubernetes
function kcli() {
  pod=$1; shift

  if [[ -z "$1" ]]
  then
    command='sh'
  else
    command=$1; shift
  fi

  kubectl exec -it $pod -- $command $@
}

alias k="kubectl"
alias kx="kubectx || kubectl config get-contexts"
alias ka="kubectl apply -f"
alias kp="kubectl get pods"
alias ki="kubectl get ingress"
alias ks="kubectl get services"
alias kss="kubectl get secrets"
alias kg="kubectl get"
alias kl="kubectl logs"
alias kd="kubectl describe"
alias kpw="watch -n1 'kubectl get pods'"

# Hanami
alias hc="bundle exec hanami console --engine=pry"
alias hs="bundle exec hanami server"
alias h="bundle exec hanami"
#
# Common
alias ll="ls -lh"
alias la="ls -lah"
alias s="cd ~/apps"
alias ..="cd ../"
alias ...="cd ../../"
alias d="cd ~/Downloads"
alias b="bundle exec"
alias v="nvim"
alias bo="EDITOR=subl bundle open"
alias no="EDITOR=subl npm edit"
alias kov="COVER=1 rspec --no-fail-fast"
alias tenv="RAILS_ENV=test MIX_ENV=test"
alias chrome="open -a \"Google Chrome\""
alias da="direnv allow"
